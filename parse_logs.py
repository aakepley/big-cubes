import gzip
from datetime import datetime
import os
import sys
import re
import numpy as np
import pdb



def parse_pipe_casalog(logfile):
    '''
    Purpose: parse one casa log generated by the pipeline

    Notes:
    -- tricky bit is going to be the calibrator imaging, which is parallelized at the pipeline
    level. How to keep try? mpi server number? Easiest way is just to used the line that is printed right before the end of the task. that gives thte total timing information and there should okay be one.

    -- Need to add in toolkit calls as well: string to key off of: If you want to ask Felipe to extract casatools.imager.advise that would be good.  The pipeline prints “CASA tool call took 17.187121s” for each call so it should be easy.

    -- Need to figure out when the pipeline start time is. 
     
    Date        Programmer      Description of Changes
    ----------------------------------------------------------------------
    1/17/2023   A.A. Kepley     Original Code

    '''

    # key off of task time report right before End Task message in CASA
    taskTimeRE = re.compile(r"Task (?P<taskname>\w+) complete. Start time: (?P<startTime>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{6}) End time: (?P<endTime>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{6})" )

    #toolTimeRE = re.compile(r"CASA tool call took (?P<tooltime>.*?)s")
    toolTimeRE = re.compile(r"(?P<toolname>\w+\.\w+\.\w+)\(.*?\) CASA tool call took (?P<tooltime>.*?)s")
    
    dateFmtRE = re.compile(r"(?P<timedate>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})")

    if logfile.endswith('.gz'):
        filein = gzip.open(logfile,mode='rb')
    else:
        filein = open(logfile, 'rb')

    results = {}
    startTime = 0
    endTime = 0

    for line in filein:

        line = line.decode('utf-8')

        # is it a task?
        if taskTimeRE.search(line):

            taskStr = taskTimeRE.search(line).group('taskname')
            startTimeStr = taskTimeRE.search(line).group('startTime')
            endTimeStr = taskTimeRE.search(line).group('endTime')

            startTime = datetime.strptime(startTimeStr,  '%Y-%m-%d %H:%M:%S.%f')
            endTime = datetime.strptime(endTimeStr,  '%Y-%m-%d %H:%M:%S.%f')

            timeDiff = endTime - startTime
            timeDiff = timeDiff.total_seconds()

            # count up time spent on casatasks
            if 'casatasks' in results.keys():
                results['casatasks'] = timeDiff + results['casatasks']
            else:
                results['casatasks'] = timeDirr

            # count up time spent on individual casa tasks
            if taskStr in results.keys():
                results[taskStr] = timeDiff + results[taskStr]
            else:
                results[taskStr] = timeDiff
                
        # is it a tool?
        elif toolTimeRE.search(line):
            
            toolTime = float(toolTimeRE.search(line).group('tooltime'))
            toolName = toolTimeRE.search(line).group('toolname')

            # count up all time spent on casa tool calls
            if 'casatools' in results.keys():
                results['casatools'] = toolTime + results['casatools']
            else:
                results['casatools'] = toolTime

            # count up time spent on particular casa tool calls
            if toolName in results.keys():
                results[toolName] = toolTime + results[toolName]
            else:
                results[toolName] = toolTime

        else:
            continue
        
    return results
                                        

def parse_all_pipe_casalogs(logdir):
    '''
    Purpose: parse all weblogs in directory

    Date        Programmer      Description of changes
    ----------------------------------------------------------------------
    1/17/2023   A.A. Kepley     Original Code
    '''

    import glob

    
    

    

    

  
